class Node{
    public:
    int data;
    Node *next;
    Node(int val){
        data=val;
        next=NULL;
    }
};
class MyLinkedList {
    private:
    int size=0;
    Node* head=NULL;
public:
    MyLinkedList() {
         
    }
    
    int get(int index) {
       if(index>=size)return -1;
       Node *temp=head;
       int i=0;
       while(i!=index){
        temp=temp->next;
        i++;
       } 
       return temp->data;
    }
    
    void addAtHead(int val) {
        if(head==NULL){
             Node *temp=new Node(val);
             head=temp;
             size=size+1;
        }
        else{
     Node *temp=new Node(val);
    
     temp->next=head;
head=temp;
size =size+1;
        }
    }
    
    void addAtTail(int val) {
         if(head==NULL){
             Node *temp=new Node(val);
             head=temp;
             size=size+1;
        }
        else{
        Node* temp=head;
        while(temp->next!=NULL){
            temp=temp->next;
           
        }
Node* tail=new Node(val);
temp->next=tail;
 size=size+1;
        }
    }
    
    void addAtIndex(int index, int val) {
         if(head==NULL && index==0){
            //  Node *temp=new Node(val);
            //  head=temp;
            //  size=size+1;
            addAtHead( val); 
        }
        else if(index==0){
            addAtHead( val);
        }
        else{
        if(index>size)return ;
    Node* New=new Node(val);
    int i=0;
    Node* temp=head;
    while(i!=index-1){
temp=temp->next;
i++;}  
New->next=temp->next;
temp->next=New;
size=size+1;}
    }
    
void deleteAtIndex(int index) {
    if (index >= size || head == NULL) return;

    // Case 1: Delete head
    if (index == 0) {
        Node* temp = head;
        head = head->next;
        delete temp;
        size--;
        return;
    }

    // Case 2: Delete middle or last
    Node* temp = head;
    for (int i = 0; i < index - 1; i++) {
        temp = temp->next;
    }

    Node* curr = temp->next;
    temp->next = curr->next;
    delete curr;
    size--;
}

};
